package model.daoModels;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig languageLocaleDaoConfig;
    private final DaoConfig projectDaoConfig;
    private final DaoConfig languageDaoConfig;
    private final DaoConfig versionDaoConfig;
    private final DaoConfig bookDaoConfig;
    private final DaoConfig verificationDaoConfig;
    private final DaoConfig bibleChapterDaoConfig;
    private final DaoConfig storiesChapterDaoConfig;
    private final DaoConfig storyPageDaoConfig;
    private final DaoConfig signingOrganizationDaoConfig;

    private final LanguageLocaleDao languageLocaleDao;
    private final ProjectDao projectDao;
    private final LanguageDao languageDao;
    private final VersionDao versionDao;
    private final BookDao bookDao;
    private final VerificationDao verificationDao;
    private final BibleChapterDao bibleChapterDao;
    private final StoriesChapterDao storiesChapterDao;
    private final StoryPageDao storyPageDao;
    private final SigningOrganizationDao signingOrganizationDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        languageLocaleDaoConfig = daoConfigMap.get(LanguageLocaleDao.class).clone();
        languageLocaleDaoConfig.initIdentityScope(type);

        projectDaoConfig = daoConfigMap.get(ProjectDao.class).clone();
        projectDaoConfig.initIdentityScope(type);

        languageDaoConfig = daoConfigMap.get(LanguageDao.class).clone();
        languageDaoConfig.initIdentityScope(type);

        versionDaoConfig = daoConfigMap.get(VersionDao.class).clone();
        versionDaoConfig.initIdentityScope(type);

        bookDaoConfig = daoConfigMap.get(BookDao.class).clone();
        bookDaoConfig.initIdentityScope(type);

        verificationDaoConfig = daoConfigMap.get(VerificationDao.class).clone();
        verificationDaoConfig.initIdentityScope(type);

        bibleChapterDaoConfig = daoConfigMap.get(BibleChapterDao.class).clone();
        bibleChapterDaoConfig.initIdentityScope(type);

        storiesChapterDaoConfig = daoConfigMap.get(StoriesChapterDao.class).clone();
        storiesChapterDaoConfig.initIdentityScope(type);

        storyPageDaoConfig = daoConfigMap.get(StoryPageDao.class).clone();
        storyPageDaoConfig.initIdentityScope(type);

        signingOrganizationDaoConfig = daoConfigMap.get(SigningOrganizationDao.class).clone();
        signingOrganizationDaoConfig.initIdentityScope(type);

        languageLocaleDao = new LanguageLocaleDao(languageLocaleDaoConfig, this);
        projectDao = new ProjectDao(projectDaoConfig, this);
        languageDao = new LanguageDao(languageDaoConfig, this);
        versionDao = new VersionDao(versionDaoConfig, this);
        bookDao = new BookDao(bookDaoConfig, this);
        verificationDao = new VerificationDao(verificationDaoConfig, this);
        bibleChapterDao = new BibleChapterDao(bibleChapterDaoConfig, this);
        storiesChapterDao = new StoriesChapterDao(storiesChapterDaoConfig, this);
        storyPageDao = new StoryPageDao(storyPageDaoConfig, this);
        signingOrganizationDao = new SigningOrganizationDao(signingOrganizationDaoConfig, this);

        registerDao(LanguageLocale.class, languageLocaleDao);
        registerDao(Project.class, projectDao);
        registerDao(Language.class, languageDao);
        registerDao(Version.class, versionDao);
        registerDao(Book.class, bookDao);
        registerDao(Verification.class, verificationDao);
        registerDao(BibleChapter.class, bibleChapterDao);
        registerDao(StoriesChapter.class, storiesChapterDao);
        registerDao(StoryPage.class, storyPageDao);
        registerDao(SigningOrganization.class, signingOrganizationDao);
    }
    
    public void clear() {
        languageLocaleDaoConfig.getIdentityScope().clear();
        projectDaoConfig.getIdentityScope().clear();
        languageDaoConfig.getIdentityScope().clear();
        versionDaoConfig.getIdentityScope().clear();
        bookDaoConfig.getIdentityScope().clear();
        verificationDaoConfig.getIdentityScope().clear();
        bibleChapterDaoConfig.getIdentityScope().clear();
        storiesChapterDaoConfig.getIdentityScope().clear();
        storyPageDaoConfig.getIdentityScope().clear();
        signingOrganizationDaoConfig.getIdentityScope().clear();
    }

    public LanguageLocaleDao getLanguageLocaleDao() {
        return languageLocaleDao;
    }

    public ProjectDao getProjectDao() {
        return projectDao;
    }

    public LanguageDao getLanguageDao() {
        return languageDao;
    }

    public VersionDao getVersionDao() {
        return versionDao;
    }

    public BookDao getBookDao() {
        return bookDao;
    }

    public VerificationDao getVerificationDao() {
        return verificationDao;
    }

    public BibleChapterDao getBibleChapterDao() {
        return bibleChapterDao;
    }

    public StoriesChapterDao getStoriesChapterDao() {
        return storiesChapterDao;
    }

    public StoryPageDao getStoryPageDao() {
        return storyPageDao;
    }

    public SigningOrganizationDao getSigningOrganizationDao() {
        return signingOrganizationDao;
    }

}

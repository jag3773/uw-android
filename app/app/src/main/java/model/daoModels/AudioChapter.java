package model.daoModels;

import model.daoModels.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import org.json.JSONObject;
import model.UWDatabaseModel;
// KEEP INCLUDES END
/**
 * Entity mapped to table "AUDIO_CHAPTER".
 */
public class AudioChapter extends model.UWDatabaseModel  implements java.io.Serializable, Comparable<StoriesChapter> {

    private Long id;
    private String uniqueSlug;
    private String source;
    private String sourceSignature;
    private Integer chapter;
    private Integer bitRate;
    private Integer length;
    private Integer size;
    private java.util.Date modified;
    private long audioBookId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AudioChapterDao myDao;

    private AudioBook audioBook;
    private Long audioBook__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public AudioChapter() {
    }

    public AudioChapter(Long id) {
        this.id = id;
    }

    public AudioChapter(Long id, String uniqueSlug, String source, String sourceSignature, Integer chapter, Integer bitRate, Integer length, Integer size, java.util.Date modified, long audioBookId) {
        this.id = id;
        this.uniqueSlug = uniqueSlug;
        this.source = source;
        this.sourceSignature = sourceSignature;
        this.chapter = chapter;
        this.bitRate = bitRate;
        this.length = length;
        this.size = size;
        this.modified = modified;
        this.audioBookId = audioBookId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAudioChapterDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUniqueSlug() {
        return uniqueSlug;
    }

    public void setUniqueSlug(String uniqueSlug) {
        this.uniqueSlug = uniqueSlug;
    }

    public String getSource() {
        return source;
    }

    public void setSource(String source) {
        this.source = source;
    }

    public String getSourceSignature() {
        return sourceSignature;
    }

    public void setSourceSignature(String sourceSignature) {
        this.sourceSignature = sourceSignature;
    }

    public Integer getChapter() {
        return chapter;
    }

    public void setChapter(Integer chapter) {
        this.chapter = chapter;
    }

    public Integer getBitRate() {
        return bitRate;
    }

    public void setBitRate(Integer bitRate) {
        this.bitRate = bitRate;
    }

    public Integer getLength() {
        return length;
    }

    public void setLength(Integer length) {
        this.length = length;
    }

    public Integer getSize() {
        return size;
    }

    public void setSize(Integer size) {
        this.size = size;
    }

    public java.util.Date getModified() {
        return modified;
    }

    public void setModified(java.util.Date modified) {
        this.modified = modified;
    }

    public long getAudioBookId() {
        return audioBookId;
    }

    public void setAudioBookId(long audioBookId) {
        this.audioBookId = audioBookId;
    }

    /** To-one relationship, resolved on first access. */
    public AudioBook getAudioBook() {
        long __key = this.audioBookId;
        if (audioBook__resolvedKey == null || !audioBook__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AudioBookDao targetDao = daoSession.getAudioBookDao();
            AudioBook audioBookNew = targetDao.load(__key);
            synchronized (this) {
                audioBook = audioBookNew;
            	audioBook__resolvedKey = __key;
            }
        }
        return audioBook;
    }

    public void setAudioBook(AudioBook audioBook) {
        if (audioBook == null) {
            throw new DaoException("To-one property 'audioBookId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.audioBook = audioBook;
            audioBookId = audioBook.getId();
            audioBook__resolvedKey = audioBookId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public int compareTo(StoriesChapter another) {
        return 0;
    }

    @Override
    public UWDatabaseModel setupModelFromJson(JSONObject json) {
        return null;
    }

    @Override
    public UWDatabaseModel setupModelFromJson(JSONObject json, UWDatabaseModel parent) {
        return null;
    }

    @Override
    public boolean updateWithModel(UWDatabaseModel newModel) {
        return false;
    }

    @Override
    public void insertModel(DaoSession session) {

    }
    // KEEP METHODS END

}
